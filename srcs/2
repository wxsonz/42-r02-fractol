#include "fractol.h"

// Updates the stored parameters if a change is detected
static void	update_last_params(t_fractal *f, double* current)
{
	int	i;

	i = 0;
	while (i < 10)
	{
		f->last_params[i] = current[i];
		i++;
	}
}

// Checks if fractal parameters have changed to trigger a re-render
static void	check_view_change(t_fractal *f)
{
	double	current_params[10];
	int		i;

	current_params[0] = f->zoom;
	current_params[1] = f->offset_x;
	current_params[2] = f->offset_y;
	current_params[3] = f->c.real;
	current_params[4] = f->c.imag;
	current_params[5] = f->z.real;
	current_params[6] = f->z.imag;
	current_params[7] = f->power_mag;
	current_params[8] = f->power_ang;
	current_params[9] = (double)f->iter_max;
	i = 0;
	while (i < 10)
	{
		if (fabs(current_params[i] - f->last_params[i]) > 1e-9)
		{
			f->view_changed = true;
			update_last_params(f, current_params);
			return ;
		}
		i++;
	}
	f->view_changed = false;
}

// Updates the quality level for adaptive rendering
static void	update_quality_level(t_fractal *f)
{
	if (f->view_changed)
		f->quality_level = 2;
	else
	{
		if (f->quality_level > 0)
			f->quality_level--;
	}
}

// Draws the image pixel by pixel (or block by block for low quality)
static void	draw_image(t_fractal *f)
{
	int			x;
	int			y;
	int			step;
	int			iter;
	uint32_t	color;

	step = 3 << f->quality_level;
	y = 0;
	while (y < HEIGHT)
	{
		x = 0;
		while (x < WIDTH)
		{
			iter = calculate_iterations(f, x, y);
			color = get_color(iter, f->iter_max);
			mlx_put_pixel(f->img, x, y, color);
			x += step;
		}
		y += step;
	}
}

// Main render loop hook, called every frame
void	render(void *param)
{
	t_fractal	*f;

	f = (t_fractal *)param;
	check_view_change(f);
	update_quality_level(f);
	if (f->view_changed || f->quality_level > 0)
	{
		draw_image(f);
	}
}
